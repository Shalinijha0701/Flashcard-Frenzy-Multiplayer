import { createServerClient } from '@supabase/ssr';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import type { CookieOptions } from '@supabase/ssr';

// Simple rate limiting (per IP)
const RATE_LIMIT = 100; // requests per 15 minutes
const WINDOW_MS = 15 * 60 * 1000;
const ipRequests: Record<string, { count: number; start: number }> = {};

export async function middleware(request: NextRequest) {
  // Rate limiting
  const ip = request.headers.get('x-forwarded-for') || 'unknown';
  const now = Date.now();
  if (!ipRequests[ip] || now - ipRequests[ip].start > WINDOW_MS) {
    ipRequests[ip] = { count: 1, start: now };
  } else {
    ipRequests[ip].count++;
  }
  if (ipRequests[ip].count > RATE_LIMIT) {
    return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });
  }

  // Enforce HTTPS in production only (skip for localhost/dev)
  const hostname = request.nextUrl.hostname;
  const isLocalhost = hostname === 'localhost' || hostname === '127.0.0.1';
  if (!isLocalhost && process.env.NODE_ENV === 'production') {
    if (request.headers.get('x-forwarded-proto') !== 'https') {
      const url = request.nextUrl.clone();
      url.protocol = 'https';
      return NextResponse.redirect(url);
    }
  }

  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  });

  // Skip Supabase initialization in these cases:
  // 1. Missing environment variables
  // 2. Build time
  // 3. Invalid URLs
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  const isBuildTime = process.env.NODE_ENV === 'production' && process.env.NEXT_PHASE === 'phase-production-build';

  if (!supabaseUrl || !supabaseAnonKey || isBuildTime) {
    console.warn('Skipping Supabase initialization:', { 
      reason: !supabaseUrl ? 'Missing URL' : 
              !supabaseAnonKey ? 'Missing Key' : 
              'Build Time'
    });
    return response;
  }

  // Validate URL before creating client
  try {
    new URL(supabaseUrl);
  } catch (error) {
    console.warn('Invalid Supabase URL:', supabaseUrl);
    return response;
  }

  try {
    const supabase = createServerClient(
      supabaseUrl,
      supabaseAnonKey,
      {
        cookies: {
          get(name: string) {
            return request.cookies.get(name)?.value;
          },
          set(name: string, value: string, options: CookieOptions) {
            request.cookies.set({
              name,
              value,
              ...options,
            });
            response.cookies.set({
              name,
              value,
              ...options,
            });
          },
          remove(name: string, options: CookieOptions) {
            request.cookies.set({
              name,
              value: '',
              ...options,
            });
            response.cookies.set({
              name,
              value: '',
              ...options,
            });
          },
        },
      }
    );

    try {
      const { data: { user } } = await supabase.auth.getUser();

      // Protected routes
      if (request.nextUrl.pathname.startsWith('/dashboard') ||
          request.nextUrl.pathname.startsWith('/game')) {
        if (!user) {
          return NextResponse.redirect(new URL('/', request.url));
        }
      }
    } catch (error) {
      console.warn('Supabase auth check failed:', error);
    }

    return response;
  } catch (error) {
    // If client creation fails, continue without Supabase
    console.warn('Supabase client creation failed:', error);
    return response;
  }
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
};
